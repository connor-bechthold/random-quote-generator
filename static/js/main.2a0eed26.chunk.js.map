{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","setQuoteIndex","randomInt","state","quotesArray","length","getQuote","quoteIndex","clickHandler","setState","setColor","index","colors","fetch","then","data","json","goodData","newColor","this","className","id","size","icon","faQuoteLeft","style","color","quoteText","quoteAuthor","onClick","backgroundColor","target","borderColor","href","faTwitter","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+TA0HeA,E,kDAlHd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAkCPC,cAAgB,WACf,OAAOC,IAAU,EAAKC,MAAMC,YAAYC,OAAS,IApC/B,EAuCnBC,SAAW,WACV,OAAO,EAAKH,MAAMC,YAAY,EAAKD,MAAMI,aAxCvB,EA2CnBC,aAAe,WACd,EAAKC,SAAS,CAAEF,WAAY,EAAKN,kBACjC,EAAKS,YA7Ca,EAgDnBA,SAAW,WACV,IAAIC,EAAQT,IAAU,EAAKC,MAAMS,OAAOP,OAAS,GACjD,OAAO,EAAKF,MAAMS,OAAOD,IAhDzB,EAAKR,MAAQ,CAEZI,WAAY,KAEZH,YAAa,GAEbQ,OAAQ,CACP,UACA,UACA,UACA,UACA,UACA,UACA,eAfgB,E,gEAoBE,IAAD,OAEnBC,MACC,qFAECC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UAEpBF,MAAK,SAACG,GAAD,OACL,EAAKR,SAAS,CAAEL,YAAaa,IAAY,WAExC,EAAKR,SAAS,CAAEF,WAAY,EAAKN,0B,+BA0BpC,IAAIiB,EAAWC,KAAKT,WACpB,OACC,yBAAKU,UAAU,OACd,wBAAIA,UAAU,SAAd,0BACA,yBAAKC,GAAG,YACP,yBAAKA,GAAG,QACP,uBAAGA,GAAG,SACL,kBAAC,IAAD,CACCC,KAAK,KACLC,KAAMC,IACNJ,UAAU,UACVK,MAAO,CAAEC,MAAOR,KAGhBC,KAAKb,WAAaa,KAAKb,WAAWqB,UAAY,IAEhD,wBAAIN,GAAG,UACL,IADF,IAEG,IAEDF,KAAKb,WAC6B,KAAhCa,KAAKb,WAAWsB,YACf,UACAT,KAAKb,WAAWsB,YACjB,IACE,IACN,4BACCC,QAASV,KAAKX,aACdY,UAAU,0BACVK,MAAO,CAAEK,gBAAiBZ,EAAUQ,MAAO,UAH5C,aAOA,yBAAKN,UAAU,UACd,uBACCA,UAAU,0BACVW,OAAO,SACPN,MAAO,CAAEK,gBAAiBZ,EAAUc,YAAad,GACjDe,KAAI,iDACHd,KAAKb,WAAaa,KAAKb,WAAWqB,UAAY,GAD3C,eAGHR,KAAKb,WAC8B,KAAhCa,KAAKb,WAAWsB,YACf,UACAT,KAAKb,WAAWsB,YACjB,GAPA,uDAUJ,kBAAC,IAAD,CAAiBL,KAAMW,e,GAzGbC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2a0eed26.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport randomInt from \"random-int\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t//State value for index of displayed quote\n\t\t\tquoteIndex: null,\n\t\t\t//State value for fetched array\n\t\t\tquotesArray: [],\n\t\t\t//Pre-written array for colours that will be used throughout the app\n\t\t\tcolors: [\n\t\t\t\t\"#FF3333\",\n\t\t\t\t\"#00acee\",\n\t\t\t\t\"#ffa500\",\n\t\t\t\t\"#ff337b\",\n\t\t\t\t\"#565656\",\n\t\t\t\t\"#242424\",\n\t\t\t\t\"##7F00FF\t\",\n\t\t\t],\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\t//Fetch the data\n\t\tfetch(\n\t\t\t\"https://raw.githubusercontent.com/JamesFT/Database-Quotes-JSON/master/quotes.json\"\n\t\t)\n\t\t\t.then((data) => data.json())\n\t\t\t//Sets the quotesArray state to the data fetched\n\t\t\t.then((goodData) =>\n\t\t\t\tthis.setState({ quotesArray: goodData }, () => {\n\t\t\t\t\t//Handles asynchronous behaviour and ensures that a random index is generated after quotes data is fetched\n\t\t\t\t\tthis.setState({ quoteIndex: this.setQuoteIndex() });\n\t\t\t\t})\n\t\t\t);\n\t}\n\t//Method that returns a random index from the quotes array\n\tsetQuoteIndex = () => {\n\t\treturn randomInt(this.state.quotesArray.length - 1);\n\t};\n\t//Method that returns the quote object at the random index\n\tgetQuote = () => {\n\t\treturn this.state.quotesArray[this.state.quoteIndex];\n\t};\n\t//On the click of the new quote button, the quote index will randomly generate a new number\n\tclickHandler = () => {\n\t\tthis.setState({ quoteIndex: this.setQuoteIndex() });\n\t\tthis.setColor();\n\t};\n\t//Returns a random colour from the colors state\n\tsetColor = () => {\n\t\tlet index = randomInt(this.state.colors.length - 1);\n\t\treturn this.state.colors[index];\n\t};\n\trender() {\n\t\t{\n\t\t\t/* Variable that stores the main colour being used in the app currently */\n\t\t}\n\t\tlet newColor = this.setColor();\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1 className=\"title\">Random Quote Generator</h1>\n\t\t\t\t<div id=\"quotebox\">\n\t\t\t\t\t<div id=\"text\">\n\t\t\t\t\t\t<p id=\"quote\">\n\t\t\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\t\t\tsize=\"2x\"\n\t\t\t\t\t\t\t\ticon={faQuoteLeft}\n\t\t\t\t\t\t\t\tclassName=\"faQuote\"\n\t\t\t\t\t\t\t\tstyle={{ color: newColor }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{/* If the quote data exists, display the quote, otherwise display nothing */}\n\t\t\t\t\t\t\t{this.getQuote() ? this.getQuote().quoteText : \"\"}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<h4 id=\"author\">\n\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t-{\" \"}\n\t\t\t\t\t\t\t{/* If the quote data exists and the author property is empty, change it to unknown, display the author, otherwise display nothing */}\n\t\t\t\t\t\t\t{this.getQuote()\n\t\t\t\t\t\t\t\t? this.getQuote().quoteAuthor === \"\"\n\t\t\t\t\t\t\t\t\t? \"Unknown\"\n\t\t\t\t\t\t\t\t\t: this.getQuote().quoteAuthor\n\t\t\t\t\t\t\t\t: \"\"}\n\t\t\t\t\t\t</h4>{\" \"}\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={this.clickHandler}\n\t\t\t\t\t\t\tclassName=\"btn btn-block btn-quote\"\n\t\t\t\t\t\t\tstyle={{ backgroundColor: newColor, color: \"white\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tNew Quote\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div className=\"center\">\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\tclassName=\"twitter btn btn-primary\"\n\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\tstyle={{ backgroundColor: newColor, borderColor: newColor }}\n\t\t\t\t\t\t\t\thref={`https://twitter.com/intent/tweet?text=\"${\n\t\t\t\t\t\t\t\t\tthis.getQuote() ? this.getQuote().quoteText : \"\"\n\t\t\t\t\t\t\t\t}\" - ${\n\t\t\t\t\t\t\t\t\tthis.getQuote()\n\t\t\t\t\t\t\t\t\t\t? this.getQuote().quoteAuthor === \"\"\n\t\t\t\t\t\t\t\t\t\t\t? \"Unknown\"\n\t\t\t\t\t\t\t\t\t\t\t: this.getQuote().quoteAuthor\n\t\t\t\t\t\t\t\t\t\t: \"\"\n\t\t\t\t\t\t\t\t} (From Random Quote Generator by Connor Bechthold)`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faTwitter} />\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}